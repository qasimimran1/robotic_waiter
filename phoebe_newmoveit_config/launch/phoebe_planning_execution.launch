<launch>
  <rosparam file= '$(find phoebe_newmoveit_config)/config/joint_names.yaml'/>
  
  <include file="$(find phoebe_newmoveit_config)/launch/smart_grassping_moveit_controller_manager.launch.xml"/>

  <!-- Gazebo specific options -->
  <arg name="gazebo_gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- By default, use the urdf location provided from the package -->
  <arg name="urdf_path" default="$(find phoebe_description)/phoebe.urdf"/>

  <!-- launch the gazebo simulator and spawn the robot -->
  <include file="$(find phoebe_newmoveit_config)/launch/gazebo.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="urdf_path" value="$(arg urdf_path)"/>
  </include>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find phoebe_newmoveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher">
    
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  
  <include file="$(find phoebe_newmoveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true"/>    
  </include>  

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find phoebe_newmoveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>    
  </include>

  
</launch>